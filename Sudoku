#include<iostream>
#include<cmath>
using namespace std;

bool IsSafeToPut(int mat[][9],int i,int j,int no,int n){
	
	for(int r=0;r<n;r++)
	{
		if(mat[r][j]==no)
		{
			return false;
		}
	}
	for(int c=0;c<n;c++)
	{
		if(mat[i][c]==no)
		{
			return false;
		}
	}
	
	n=sqrt(n);

	int si=(i/n)*n;
	int sj=(j/n)*n;

	for(int r=si;r<si;r++)
	{
		for(int c=sj;c<sj;c++)
		{
			if(mat[r][c]==no)
			{
				return false;
			}
		}
	}
	return true;
}

bool SudokuSolver(int mat[][9],int i,int j,int n){
	//base case
	if(i==n) 
	{ //print solved sudoku
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				cout<<mat[i][j]<<" ";
			}
			cout<<endl;
		}
		return true;

	}
	//recursive case
	if(j==n){ 
		return SudokuSolver(mat,i+1,0,n);
	}
	if(mat[i][j]!=0){ 
		return SudokuSolver(mat,i,j+1,n);
	}
	//for empty cell
	for(int no=1;no<=n;no++)
	{
		if(IsSafeToPut(mat,i,j,no,n))
		{
			mat[i][j]=no;
			bool RestSolved= SudokuSolver(mat,i,j+1,n);
			if(RestSolved==true)
			{
				return true;
			}
			mat[i][j]=0;
		}
	}
	return false;
}



int main(){
	int n;
	int mat[9][9] =
	{	{5, 3, 0, 0, 7, 0, 0, 0, 0},
		{6, 0, 0, 1, 9, 5, 0, 0, 0},
		{0, 9, 8, 0, 0, 0, 0, 6, 0},
		{8, 0, 0, 0, 6, 0, 0, 0, 3},
		{4, 0, 0, 8, 0, 3, 0, 0, 1},
		{7, 0, 0, 0, 2, 0, 0, 0, 6},
		{0, 6, 0, 0, 0, 0, 2, 8, 0},
		{0, 0, 0, 4, 1, 9, 0, 0, 5},
		{0, 0, 0, 0, 8, 0, 0, 7, 9}
	};
	SudokuSolver(mat,0,0,9);

	return 0;
}
